use serde::Deserialize;
use thiserror::Error;

/// An error generated somewhere within the library.
#[derive(Error, Debug)]
pub enum Error {
    /// An error that originated from Telegram. May be caused by bad request
    /// parameters, rate limiting, trying to send to a user that blocked the
    /// bot, a group that migrated to a supergroup, or others.
    #[error("telegram error: {0}")]
    Telegram(#[from] TelegramError),
    /// An error caused by invalid JSON. Most likely to be caused by the Bot API
    /// having issues and returning HTTP responses.
    #[error("json parsing error: {0}")]
    JSON(#[from] serde_json::Error),
    /// An error caused by a network error.
    #[error("http error: {0}")]
    Request(#[from] reqwest::Error),
}

/// Additional information returned by Telegram with an error.
///
/// Useful for implementing automatic retries when rate limited or following
/// migrations to supergroups.
#[derive(Debug, Deserialize)]
pub struct ResponseParameters {
    pub migrate_to_chat_id: Option<i64>,
    pub retry_after: Option<i32>,
}

/// An error generated by Telegram.
#[derive(Debug, Deserialize)]
pub struct TelegramError {
    /// A HTTP-style error code.
    pub error_code: Option<i32>,
    /// A human readable error description.
    pub description: Option<String>,
    /// Additional information about errors in the request.
    pub parameters: Option<ResponseParameters>,
}

impl std::error::Error for TelegramError {}

impl std::fmt::Display for TelegramError {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(
            f,
            "Telegram Error {}: {}",
            self.error_code.unwrap_or(-1),
            self.description
                .clone()
                .unwrap_or_else(|| "no description".to_string())
        )
    }
}
